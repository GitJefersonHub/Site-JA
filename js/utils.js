// Representa sensa√ß√µes t√©rmicas com emoji
export function getTemperatureFeelingIcon(temp) {
  const t = parseFloat(temp);
  if (t <= 10) return 'ü•∂';         
  if (t <= 18) return 'üß•';         
  if (t <= 27) return 'üôÇ';         
  if (t <= 33) return 'ü•µ';         
  return 'üî•';                      
}

// Classifica √≠ndice UV com emoji e descri√ß√£o
export function getUvIndexDescription(uv) {
  const uvValue = parseFloat(uv);
  if (isNaN(uvValue)) return 'üîç √çndice UV indispon√≠vel';

  if (uvValue < 3) return 'üü¢ Baixo';
  if (uvValue < 6) return 'üü° Moderado';
  if (uvValue < 8) return 'üü† Alto';
  if (uvValue < 11) return 'üî¥ Muito alto';
  return 'üü£ Extremo';
}

// Representa condi√ß√µes clim√°ticas com √≠cones
export function getWeatherIcon(description) {
  const desc = description.toLowerCase();

  if (desc.includes('c√©u limpo')) return '‚òÄÔ∏è';
  if (desc.includes('nublado') && !desc.includes('parcial')) return '‚òÅÔ∏è';
  if (desc.includes('algumas nuvens') || desc.includes('parcial')) return '‚õÖ';
  if (desc.includes('chuva leve')) return 'üå¶Ô∏è';
  if (desc.includes('chuva') || desc.includes('tempestade')) return 'üåßÔ∏è';
  if (desc.includes('neve')) return '‚ùÑÔ∏è';
  if (desc.includes('n√©voa') || desc.includes('neblina')) return 'üå´Ô∏è';

  return 'üå°Ô∏è';
}

// Formata n√∫mero para dois d√≠gitos
export const formatTwoDigits = value => 
  parseInt(value).toString().padStart(2, '0');

// Busca √≠ndice UV atual com base em lat/lon
export async function fetchCurrentUvIndex(lat, lon) {
  try {
    const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current=uv_index`;
    const response = await fetch(url);
    const data = await response.json();

    const uv = data?.current?.uv_index;
    if (!Number.isFinite(uv)) throw new Error('√çndice UV inv√°lido ou ausente.');

    return uv;
  } catch (error) {
    console.error('Erro ao buscar √≠ndice UV:', error.message);
    return null;
  }
}
